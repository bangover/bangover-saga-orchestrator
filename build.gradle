buildscript {
    ext {
		NEXUS_SNAPSHOTS_REPOSITORY_URL = "http://nexus.bangover.cloud/repository/maven-bangover-snapshots/"
		NEXUS_RELEASES_REPOSITORY_URL = "http://nexus.bangover.cloud/repository/maven-bangover-releases/"
	}

    repositories {
        mavenLocal()
        mavenCentral()
		maven {
	        url "${NEXUS_RELEASES_REPOSITORY_URL}"
			allowInsecureProtocol = true
	    }

        maven {
            url "${NEXUS_SNAPSHOTS_REPOSITORY_URL}"
			allowInsecureProtocol = true
        }
    }
}

plugins {
    id "idea"
	id "eclipse"
	id "org.jetbrains.kotlin.jvm" version "1.8.22" apply false
	id "org.jlleitschuh.gradle.ktlint" version "11.6.1" apply false
}

ext {
	NEXUS_SNAPSHOTS_REPOSITORY_URL = "http://nexus.bangover.cloud/repository/maven-bangover-snapshots/"
	NEXUS_RELEASES_REPOSITORY_URL = "http://nexus.bangover.cloud/repository/maven-bangover-releases/"
}

group = "cloud.bangover.saga.orchestration"

allprojects {
    version = this.getVersion()
}

subprojects {
	apply plugin: "idea"
	apply plugin: "eclipse"
	apply plugin: "java"
	apply plugin: "org.jetbrains.kotlin.jvm"
	apply plugin: "org.jlleitschuh.gradle.ktlint"
	apply plugin: "maven-publish"
	apply plugin: "jacoco"

    version = this.getVersion()
	
	repositories {
		mavenLocal()
		mavenCentral()
		maven {
			url "${NEXUS_RELEASES_REPOSITORY_URL}"
			allowInsecureProtocol = true
		}

		maven {
			url "${NEXUS_SNAPSHOTS_REPOSITORY_URL}"
			allowInsecureProtocol = true
		}
	}

	dependencies {
		implementation  "org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.9.0"
		implementation  "org.jetbrains.kotlin:kotlin-reflect:1.8.22"
		implementation  "org.jetbrains.kotlin:kotlin-stdlib:1.8.22"
		implementation  "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.8.0"
		
		// Logs
		implementation "org.slf4j:slf4j-api:2.0.13"
		
		// Testing
		testImplementation "io.mockk:mockk-jvm:1.13.5"
		testImplementation "io.kotest:kotest-runner-junit5:5.6.2"
		testImplementation "io.kotest:kotest-assertions-core-jvm:5.6.2"
		testImplementation "io.kotest:kotest-framework-datatest-jvm:5.6.2"
	}
	
	java {
	    sourceCompatibility = "1.8"
		targetCompatibility = "1.8"
	}

    ktlint {
        version = "0.50.0"
    }
	
	jar {
        manifest {
            attributes 'Version': project.version,
                    'Build-time': new Date().format("dd-MM-yyyy'T'HH:mm:ss")
        }
    }

    test {
		useJUnitPlatform()
		
		testLogging {
            events org.gradle.api.tasks.testing.logging.TestLogEvent.FAILED
            events org.gradle.api.tasks.testing.logging.TestLogEvent.PASSED
            exceptionFormat org.gradle.api.tasks.testing.logging.TestExceptionFormat.FULL
            showExceptions true
            showCauses true
            showStackTraces false
        }
		
		jacoco {
		    enabled = true
		}
		
		finalizedBy jacocoTestReport
    }
	
    jacoco {
        toolVersion = "0.8.12"
    }
    
	jacocoTestReport {
        description = "Generate Jacoco coverage reports after running tests."
        dependsOn test
        reports {
            xml.enabled true
            xml.required = true
            csv.enabled false
            html.enabled true
            html.destination file("${buildDir}/jacocoHtml")
        }
		
		afterEvaluate {
			classDirectories.setFrom(files(classDirectories.files.collect {
				fileTree(
				    dir: it,
					exclude: []
				)
			}))
		}
    }
	
	publishing {
        publications {
            mavenJava(MavenPublication) {
                artifactId project.name
                groupId project.group
                version project.version
            }
        }

        repositories {
            maven {
                url version.toUpperCase().endsWith("SNAPSHOT") ? "${NEXUS_SNAPSHOTS_REPOSITORY_URL}" : "${NEXUS_RELEASES_REPOSITORY_URL}"
                credentials {
                    username = System.properties["NEXUS_USER"]
                    password = System.properties["NEXUS_PASSWORD"]
                }
            }
        }
    }
	
	task deploy(type: Copy) {
        expand project: project
    }
	
	tasks.withType(JavaExec).configureEach {
        // Assign all Java system properties from
        // the command line to the JavaExec task.
        systemProperties System.properties
    }
	
	tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
	    kotlinOptions {
			freeCompilerArgs += "-Xjsr305=strict"
		    jvmTarget = "1.8"
		}
	}
}

String getVersion() {
    final String versionPrefix = '# Version '
    boolean commentLine = false
    def line = new File(rootDir, 'CHANGELOG.md').readLines().find {
        if (it =~ '<!--\\.*') {
            commentLine = true
        }
        if (!commentLine && it =~ versionPrefix) {
            return true
        }
        if (it =~ '\\.*-->') {
            commentLine = false
        }

        null
    }
    line = line.replaceFirst(versionPrefix, '').trim()
    line.substring(0, line.indexOf(' '))
}
